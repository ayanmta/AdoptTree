// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User preferences for seamless experience
  preferences UserPreferences?
  
  // Analytics and behavior tracking
  analytics UserAnalytics?
  
  // Relationships
  accounts Account[]
  sessions Session[]
  orders   Order[]
  treeAdoptions TreeAdoption[]
  userActivities UserActivity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User preferences for seamless personalization
model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Dietary preferences
  dietaryRestrictions   String[] // ["vegan", "gluten-free", "organic"]
  favoriteFruits        String[] // ["apple", "plum", "cherry"]
  
  // Communication preferences
  communicationChannel  String   @default("email") // "email", "sms", "push"
  newsletterSubscribed  Boolean  @default(true)
  harvestAlerts         Boolean  @default(true)
  
  // Harvest preferences
  harvestFrequency      String   @default("seasonal") // "monthly", "quarterly", "seasonal"
  preferredQuantity     String   @default("medium") // "small", "medium", "large"
  
  // Location preferences
  deliveryAddress       String?
  preferredDelivery     String   @default("standard") // "standard", "express", "pickup"
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Analytics tracking for user behavior
model UserAnalytics {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Page visits and engagement
  pagesVisited      String[] // Array of page URLs
  timeOnSite        Int      @default(0) // Total time in seconds
  lastVisit         DateTime @default(now())
  visitCount        Int      @default(0)
  
  // Product interactions
  productsViewed    String[] // Array of product IDs
  productsLiked     String[] // Array of product IDs
  productsPurchased String[] // Array of product IDs
  
  // Tree adoption interest
  treesViewed       String[] // Array of tree types
  treesAdopted      String[] // Array of adopted tree IDs
  
  // Device and location
  deviceType        String?  // "mobile", "desktop", "tablet"
  location          String?  // City/region for local recommendations
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// User activity tracking
model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  activity  String   // "page_view", "product_view", "tree_adoption", "purchase"
  details   Json?    // Additional activity details
  timestamp DateTime @default(now())
}

// Orders for e-commerce functionality
model Order {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  items       Json     // Array of order items
  total       Float
  status      String   @default("pending") // "pending", "confirmed", "shipped", "delivered"
  paymentStatus String @default("pending") // "pending", "paid", "failed"
  
  shippingAddress Json?
  billingAddress  Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Tree adoption tracking
model TreeAdoption {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  treeType    String   // "apple", "plum", "cherry", "apricot"
  treeName    String?  // Custom name given by user
  adoptionDate DateTime @default(now())
  
  // Tree status and updates
  status      String   @default("active") // "active", "harvested", "maintenance"
  lastUpdate  DateTime @default(now())
  nextHarvest DateTime?
  
  // Location in farm
  plotNumber  String?
  coordinates Json?    // GPS coordinates if available
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
